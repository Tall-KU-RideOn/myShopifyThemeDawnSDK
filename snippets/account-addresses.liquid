<style>
  .visually-hidden {
    border: 0px;
    clip: rect(0px, 0px, 0px, 0px);
    width: 1px;
    height: 1px;
    margin: -1px;
    padding: 0px;
    overflow: hidden;
    white-space: nowrap;
    position: absolute;
  }

  @keyframes spinner {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  .addresses-loader {
    display: flex;
    justify-content: center;
    padding-top: 16px;
  }

  .addresses-loader__spinner {
    display: inline-block;
    border-top: 2px solid currentcolor;
    border-right: 2px solid currentcolor;
    border-bottom-style: solid;
    border-left-style: solid;
    border-radius: 99999px;
    border-bottom-width: 2px;
    border-left-width: 2px;
    border-bottom-color: transparent;
    border-left-color: transparent;
    animation: 0.45s linear 0s infinite normal none running spinner;
    width: var(--spinner-size);
    height: var(--spinner-size);
    --spinner-size: 5rem;
  }

  .addresses {
    width: 100%;
  }

  .address-card {
    background-color: #f8f9fa;
    padding: 20px;
    border: 1px solid #dee2e6;
    border-radius: 5px;
    margin-bottom: 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .address-details {
    flex: 1;
  }

  .address-details p {
    margin: 0;
    line-height: 1.5;
  }

  .address-actions {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    margin-left: 20px;
  }

  .address-actions .btn {
    margin-bottom: 10px;
    width: 80px;
  }

  .btn {
    display: inline-block;
    padding: 6px 12px;
    text-align: center;
    text-decoration: none;
    border-radius: 5px;
    font-size: 14px;
  }

  .btn--secondary {
    background-color: #6c757d;
    color: white;
  }

  .btn--danger {
    background-color: #dc3545;
    color: white;
  }

  /* Modal Styles */
  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.5);
  }

  .modal-content {
    background-color: #fefefe;
    margin: 15% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
    max-width: 500px;
    border-radius: 10px;
  }

  .close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
  }

  .close:hover,
  .close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
  }
</style>

<section class="addresses">
  <div>
    <h2>Addresses</h2>
    <account-addresses></account-addresses>
  </div>
</section>

<!-- Edit Address Modal -->
<div id="editAddressModal" class="modal">
  <div class="modal-content">
    <span class="close" onclick="closeModal()">&times;</span>
    <h2>Edit Address</h2>
    <form id="editAddressForm">
      <div class="field">
        <label for="editFirstName">First Name</label>
        <input type="text" id="editFirstName" name="first_name">
      </div>
      <div class="field">
        <label for="editLastName">Last Name</label>
        <input type="text" id="editLastName" name="last_name">
      </div>
      <div class="field">
        <label for="editAddress1">Address 1</label>
        <input type="text" id="editAddress1" name="address1">
      </div>
      <div class="field">
        <label for="editAddress2">Address 2</label>
        <input type="text" id="editAddress2" name="address2">
      </div>
      <div class="field">
        <label for="editCity">City</label>
        <input type="text" id="editCity" name="city">
      </div>
      <div class="field">
        <label for="editProvince">State/Province</label>
        <input type="text" id="editProvince" name="province">
      </div>
      <div class="field">
        <label for="editZip">ZIP/Postal Code</label>
        <input type="text" id="editZip" name="zip">
      </div>
      <div class="field">
        <label for="editCountry">Country</label>
        <input type="text" id="editCountry" name="country">
      </div>
      <div class="field">
        <label for="editPhone">Phone</label>
        <input type="text" id="editPhone" name="phone">
      </div>
      <button type="button" id="saveButton">Save</button>
    </form>
  </div>
</div>

<script>
  class AccountAddresses extends HTMLElement {
    selectors = {
      loader: '.addresses-loader',
    };

    constructor() {
      super();
      this.loadAddresses();
    }

    async login() {
      this.session = await recharge.auth.loginShopifyAppProxy();
    }

    async loadAddresses() {
      this.setLoading(true);
      await this.login();
      const response = await recharge.address.listAddresses(this.session);
      console.log('Full Response:', response); // Debugging
      const addresses = response.addresses || response; // Adjusted to account for different possible response structures
      addresses.forEach(address => {
        this.append(this.createCard(address));
      });
      this.setLoading(false);
    }

    setLoading(value) {
      const loader = this.querySelector(this.selectors.loader);
      if (!value && loader) {
        loader.remove();
      } else if (value) {
        const loadingEl = document.createElement('div');
        loadingEl.classList.add(this.selectors.loader.split('.')[1]);
        this.append(loadingEl);
      }
    }

    createCard(address) {
      const card = document.createElement('div');
      card.classList.add('address-card');

      const details = document.createElement('div');
      details.classList.add('address-details');
      details.innerHTML = `
        <p>${address.first_name} ${address.last_name}</p>
        <p>${address.address1}</p>
        ${address.address2 ? `<p>${address.address2}</p>` : ''}
        <p>${address.city}</p>
        <p>${address.province}</p>
        <p>${address.country}</p>
        <p>${address.zip}</p>
        <p>${address.phone}</p>
      `;

      const actions = document.createElement('div');
      actions.classList.add('address-actions');
      actions.innerHTML = `
        <a href="#" class="btn btn--secondary" data-id="${address.id}" onclick="openEditModal(${address.id})">Edit</a>
        <a href="#" class="btn btn--danger" data-id="${address.id}" onclick="removeAddress(${address.id})">Remove</a>
      `;

      card.append(details);
      card.append(actions);

      return card;
    }
  }

  customElements.define('account-addresses', AccountAddresses);

  function openEditModal(id) {
    // Open modal and populate fields with address data
    const modal = document.getElementById('editAddressModal');
    modal.style.display = 'block';

    // Populate the modal with the address data (mock data here)
    document.getElementById('editFirstName').value = 'John'; // Replace with actual data
    document.getElementById('editLastName').value = 'Doe'; // Replace with actual data
    document.getElementById('editAddress1').value = '123 Main St'; // Replace with actual data
    document.getElementById('editAddress2').value = 'Apt 4B'; // Replace with actual data
    document.getElementById('editCity').value = 'Anytown'; // Replace with actual data
    document.getElementById('editProvince').value = 'CA'; // Replace with actual data
    document.getElementById('editZip').value = '90210'; // Replace with actual data
    document.getElementById('editCountry').value = 'USA'; // Replace with actual data
    document.getElementById('editPhone').value = '555-123-4567'; // Replace with actual data

    // Store the address ID for saving later
    document.getElementById('editAddressForm').dataset.addressId = id;
  }

  function closeModal() {
    document.getElementById('editAddressModal').style.display = 'none';
  }

  document.querySelector('#saveButton').addEventListener('click', async () => {
    // Get the address ID
    const addressId = document.getElementById('editAddressForm').dataset.addressId;

    // Collect updated address data
    const updatedAddress = {
      first_name: document.getElementById('editFirstName').value,
      last_name: document.getElementById('editLastName').value,
      address1: document.getElementById('editAddress1').value,
      address2: document.getElementById('editAddress2').value,
      city: document.getElementById('editCity').value,
      province: document.getElementById('editProvince').value,
      zip: document.getElementById('editZip').value,
      country: document.getElementById('editCountry').value,
      phone: document.getElementById('editPhone').value,
    };

    // Update the address using Recharge API
    await recharge.address.updateAddress(session, addressId, updatedAddress);

    // Close the modal
    closeModal();

    // Refresh the addresses list (you may need to re-fetch the data or update the DOM directly)
    const addressElement = document.querySelector(`.btn[data-id="${addressId}"]`).closest('.address-card');
    if (addressElement) {
      addressElement.querySelector('.address-details').innerHTML = `
        <p>${updatedAddress.first_name} ${updatedAddress.last_name}</p>
        <p>${updatedAddress.address1}</p>
        ${updatedAddress.address2 ? `<p>${updatedAddress.address2}</p>` : ''}
        <p>${updatedAddress.city}</p>
        <p>${updatedAddress.province}</p>
        <p>${updatedAddress.country}</p>
        <p>${updatedAddress.zip}</p>
        <p>${updatedAddress.phone}</p>
      `;
    }
  });

  function removeAddress(id) {
    // Implement your remove functionality here
    console.log('Remove address with ID:', id);
  }
</script>
