<style>
  .visually-hidden {
    border: 0px;
    clip: rect(0px, 0px, 0px, 0px);
    width: 1px;
    height: 1px;
    margin: -1px;
    padding: 0px;
    overflow: hidden;
    white-space: nowrap;
    position: absolute;
  }

  @keyframes spinner {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  .addresses-table td.id,
  .addresses-table td.actions {
    vertical-align: middle !important;
  }

  .addresses-loader {
    display: flex;
    justify-content: center;
    padding-top: 16px;
  }

  .addresses-loader__spinner {
    display: inline-block;
    border-top: 2px solid currentcolor;
    border-right: 2px solid currentcolor;
    border-bottom-style: solid;
    border-left-style: solid;
    border-radius: 99999px;
    border-bottom-width: 2px;
    border-left-width: 2px;
    border-bottom-color: transparent;
    border-left-color: transparent;
    animation: 0.45s linear 0s infinite normal none running spinner;
    width: var(--spinner-size);
    height: var(--spinner-size);
    --spinner-size: 5rem;
  }

  .addresses {
    width: 100%;
  }

  .addresses-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
  }

  .addresses-table th,
  .addresses-table td {
    padding: 10px;
    border: 1px solid #dee2e6;
    text-align: left;
  }

  .addresses-table th {
    background-color: #f8f9fa;
    font-weight: bold;
  }

  .btn {
    display: inline-block;
    padding: 6px 12px;
    text-align: center;
    text-decoration: none;
    border-radius: 5px;
    margin-right: 10px;
    font-size: 14px;
  }

  .btn--secondary {
    background-color: #6c757d;
    color: white;
  }

  .btn--danger {
    background-color: #dc3545;
    color: white;
  }
</style>

<section class="addresses">
  <div>
    <h2>Addresses</h2>
    <account-addresses>
      <table class="addresses-table">
        <thead>
          <tr>
            <th>Address 1</th>
            <th>Address 2</th>
            <th>City</th>
            <th>State</th>
            <th>ZIP</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
      <div class="addresses-loader">
        <div class="addresses-loader__spinner"><span class="visually-hidden">Loading...</span></div>
      </div>
    </account-addresses>
  </div>
</section>

<script>
  class AccountAddresses extends HTMLElement {
    selectors = {
      loader: '.addresses-loader',
      table: '.addresses-table',
    };

    constructor() {
      super();
      this.loadAddresses();
    }

    async login() {
      this.session = await recharge.auth.loginShopifyAppProxy();
    }

    async loadAddresses() {
      this.setLoading(true);
      await this.login();
      const { addresses } = await recharge.address.listAddresses(this.session);
      addresses.forEach(address => {
        const tableBody = this.querySelector(`${this.selectors.table} tbody`);
        if (!tableBody) return;
        tableBody.append(this.createRow(address));
      });
      this.setLoading(false);
    }

    setLoading(value) {
      const loader = this.querySelector(this.selectors.loader);
      if (!value && loader) {
        loader.remove();
      } else if (value) {
        const loadingEl = document.createElement('div');
        loadingEl.classList.add(this.selectors.loader.split('.')[1]);
        this.append(loadingEl);
      }
    }

    createRow(address) {
      const row = document.createElement('tr');

      const address1Col = document.createElement('td');
      address1Col.innerHTML = address.address1;
      row.append(address1Col);

      const address2Col = document.createElement('td');
      address2Col.innerHTML = address.address2 || '';
      row.append(address2Col);

      const cityCol = document.createElement('td');
      cityCol.innerHTML = address.city;
      row.append(cityCol);

      const stateCol = document.createElement('td');
      stateCol.innerHTML = address.province;
      row.append(stateCol);

      const zipCol = document.createElement('td');
      zipCol.innerHTML = address.zip;
      row.append(zipCol);

      const actionsCol = document.createElement('td');
      actionsCol.classList.add('actions');
      actionsCol.innerHTML = `
        <a href="#" class="btn btn--secondary" data-id="${address.id}" onclick="editAddress(${address.id})">Edit</a>
        <a href="#" class="btn btn--danger" data-id="${address.id}" onclick="removeAddress(${address.id})">Remove</a>
      `;
      row.append(actionsCol);

      return row;
    }
  }

  customElements.define('account-addresses', AccountAddresses);

  function editAddress(id) {
    // Implement your edit functionality here
    console.log('Edit address with ID:', id);
  }

  function removeAddress(id) {
    // Implement your remove functionality here
    console.log('Remove address with ID:', id);
  }
</script>
