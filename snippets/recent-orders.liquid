<style>
  .recent-orders {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .orders-table {
    width: 75%;
    border-collapse: collapse;
  }

  .orders-table th, .orders-table td {
    border: 1px solid #dee2e6;
    padding: 10px;
    text-align: left;
  }

  .orders-table th {
    background-color: #f8f9fa;
    font-weight: bold;
  }

  .orders-loader {
    display: flex;
    justify-content: center;
    padding-top: 16px;
  }

  .orders-loader__spinner {
    display: inline-block;
    border-top: 2px solid currentcolor;
    border-right: 2px solid currentcolor;
    border-bottom-style: solid;
    border-left-style: solid;
    border-radius: 99999px;
    border-bottom-width: 2px;
    border-left-width: 2px;
    border-bottom-color: transparent;
    border-left-color: transparent;
    animation: 0.45s linear 0s infinite normal none running spinner;
    width: var(--spinner-size);
    height: var(--spinner-size);
    --spinner-size: 5rem;
  }
</style>

<section class="recent-orders">
  <div>
    <h2>Recent Orders</h2>
    <account-recent-orders></account-recent-orders>
  </div>
</section>

<script>
  class AccountRecentOrders extends HTMLElement {
    selectors = {
      loader: '.orders-loader',
      table: '.orders-table',
    };

    constructor() {
      super();
      this.loadRecentOrders();
    }

    async login() {
      this.session = await recharge.auth.loginShopifyAppProxy();
    }

    async loadRecentOrders() {
      this.setLoading(true);
      await this.login();

      try {
        const response = await recharge.charge.listCharges(this.session, {
          limit: 5,
          status: 'success',
          include: ["customer", "charge_activities", "metafields", "payment_methods", "shipping_lines"]
        });

        const orders = response.charges;

        if (orders && orders.length > 0) {
          this.populateOrders(orders);
        } else {
          console.log('No orders found');
        }
      } catch (error) {
        console.error('Error fetching recent orders:', error);
      }

      this.setLoading(false);
    }

    populateOrders(orders) {
      const tableBody = this.querySelector(`${this.selectors.table} tbody`);
      if (!tableBody) {
        console.error('Table body not found');
        return;
      }

      orders.forEach(order => {
        tableBody.append(this.createRow(order));
      });
    }

    createRow(order) {
      const tieredDiscountValue = this.cal_tiered_discount_value(order);

      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${order.address_id}</td>
        <td>${order.id}</td>
        <td>${order.total_price}</td>
        <td>${tieredDiscountValue}</td>
      `;
      return tr;
    }

    cal_tiered_discount_value(order) {
      let totalLineItemPrice = 0;
      if (order.line_items && Array.isArray(order.line_items)) {
        order.line_items.forEach(item => {
          const unitPrice = parseFloat(item.unit_price) || 0;
          const quantity = parseInt(item.quantity) || 0;
          totalLineItemPrice += unitPrice * quantity;
        });
      }

      const totalPrice = parseFloat(order.total_price) || 0;
      const totalTax = parseFloat(order.total_tax) || 0;
      const totalDiscounts = parseFloat(order.total_discounts) || 0;
      const shippingPrice =
        order.shipping_lines?.reduce((total, line) => {
          const linePrice = parseFloat(line.price) || 0;
          return total + linePrice;
        }, 0) || 0;

      const tieredDiscountValue =
        totalLineItemPrice - totalPrice + totalTax + shippingPrice - totalDiscounts;

      return Math.max(tieredDiscountValue, 0).toFixed(2);
    }

    setLoading(isLoading) {
      const loader = this.querySelector(this.selectors.loader);
      loader.style.display = isLoading ? 'block' : 'none';
    }
  }

  if (!customElements.get('account-recent-orders')) {
    customElements.define('account-recent-orders', AccountRecentOrders);
  }
</script>
