<section class="next-orders">
  <div>
    <h2>Your Next Orders</h2>
    <account-next-orders>
      <table class="orders-table">
        <thead>
          <tr>
            <td>ID</td>
            <td>Product</td>
            <td>Quantity</td>
            <td>Discounts</td>
            <td>Price</td>
            <td>Tiered Discount Value</td> <!-- New column -->
          </tr>
        </thead>
        <tbody></tbody>
      </table>
      <div class="orders-loader">
        <div class="orders-loader__spinner"><span class="visually-hidden">Loading...</span></div>
      </div>
    </account-next-orders>
  </div>
</section>

<script>
  class AccountNextOrders extends HTMLElement {
    selectors = {
      loader: '.orders-loader',
      table: '.orders-table',
    };

    constructor() {
      super();
      this.loadNextOrders();
    }

    async login() {
      this.session = await recharge.auth.loginShopifyAppProxy();
    }

    async loadNextOrders() {
      this.setLoading(true);
      await this.login();
      const { orders } = await recharge.charge.listCharges(this.session, {
        limit: 2,
        include: ["metafields", "payment_methods"]
      });

      console.log('Next Orders Data:', orders); // Print response to the console
      orders.forEach(order => {
        const tableBody = this.querySelector(`${this.selectors.table} tbody`);
        if (!tableBody) return;
        tableBody.append(this.createRow(order));
      });
      this.setLoading(false);
    }

    createRow(order) {
      const productInfo = order.line_items.map(item => `${item.product_title}`).join(', ');

      const modificationsInfo = order.order_modifications.length > 0
        ? order.order_modifications.map(mod => `Modified: ${mod.description}`).join(', ')
        : 'No modifications';

      const activitiesInfo = order.charge_activities.length > 0
        ? order.charge_activities.map(act => `Activity: ${act.activity_type}`).join(', ')
        : 'No charge activities';

      const tieredDiscountValue = this.cal_tiered_discount_value(order);

      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${order.id}</td>
        <td>${productInfo}</td>
        <td>${order.quantity}</td>
        <td>${modificationsInfo}</td>
        <td>${activitiesInfo}</td>
        <td>${tieredDiscountValue}</td> <!-- New column for the tiered discount value -->
      `;
      return tr;
    }

    cal_tiered_discount_value(order) {
      // Calculate the tiered discount value for the order
      let orderTieredDiscountAmount = 0;

      order.line_items.forEach(item => {
        const discountForItem = (item.original_price - item.unit_price) * item.quantity;
        orderTieredDiscountAmount += discountForItem;
      });

      // Subtract total discounts from calculated tiered discount amount
      orderTieredDiscountAmount -= order.total_discounts || 0;

      // Ensure no negative values
      return Math.max(orderTieredDiscountAmount, 0).toFixed(2); // Return as a fixed two-decimal string
    }

    setLoading(isLoading) {
      const loader = this.querySelector(this.selectors.loader);
      loader.style.display = isLoading ? 'block' : 'none';
    }
  }

  customElements.define('next-orders', AccountNextOrders);
</script>
